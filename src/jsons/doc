Виды сериализации
1) Data bind,
2) Tree Model,
3) Streaming API,
4)(И дополнительный способ) Аналоги XPath,


=======================================================================================================================
1) Data bind

Самый популярный и простой способ, вы просто указываете класс,
который нужно преобразовать в json, может быть часть полей отмечаете аннотациями (а зачастую даже это необязательно),
а библиотека сама превращает этот класс и всю его иерархию классов в json.
Аналогом при работе с xml будет JAXB (Java Architecture for XML Binding)

Плюсы: наиболее простой из всех, по сути главное реализовать только Java классы,
более того можно просто сгенерировать Java классы из json'a или json схемы.

Минусы: скорость и память. Большинство библиотек использует рефлексию и т.п. методы работы с Java классами (хотя не все),
что очевидно не очень быстро. К тому же, весь json файл сразу превращается в Java объекты,
что может просто исчерпать всю доступную память, если вы попытаетесь обработать очень большой json.

Вывод: если нет проблем с производительностью, памятью и вы не собираетесь обрабатывать многогигабайтные json'ы скорее всего самый лучший способ.

Fastjson, Gson, LoganSquare, Moshi, Ig json parser, Jackson, Genson
=======================================================================================================================
2) Tree Model

Данный парсер представляет json в виде Java классов таких как Node или JsonElement c иерархической структурой,
а уже сам программист их обходит и получает из них информацию. Данный способ похож на DOM парсеры в xml.

Плюсы: обычно быстрее первого способа и проще третьего,
Минусы: уступает Data bind по простоте, плюс ряд библиотек способен генерить классы при Data bind,
а не использовать рефлексию, в этом случае то что Tree Model будет быстрее не очевидно,
к тому же не решается проблема огромных файлов и ограничения памяти.

Gson, JSON java, Jackson
========================================================================================================================
3) Streaming API
Самый низкоуровневый способ, по сути программист сам вручную разбирает токены json'a.
Зато никаких ограничений по памяти и в теории максимальная производительность.

Плюсы: производительность и минимальное потребление памяти,

Минусы: сложность использования

Gson, Jackson
========================================================================================================================
4) Аналоги XPath
Дополнительный способ, не очень подходит, если нужно получит всю информацию из json'a,
зато позволяет написав выражение $.store.book[*].author и получить список всех авторов всех книг из json'a магазина.
То есть легко получать часть информации из json'а.

Плюсы: позволяет быстро получить информацию из json'а по сложным критериям,

Минусы: не очень подходит, когда нужна все информация из json'а, не работает в обратную сторону на формирования json'ов,

Fastjson
========================================================================================================================